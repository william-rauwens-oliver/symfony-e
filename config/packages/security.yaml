security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            custom_authenticator: App\Security\JwtAuthenticator
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                target: app_home
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # L'ordre des access_control est CRUCIAL : la première règle qui matche s'applique
    access_control:
        - { path: ^/api/publications/\d+/commentaires, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/me, roles: PUBLIC_ACCESS }
        - { path: ^/auth/status, roles: PUBLIC_ACCESS }
        - { path: ^/api/search, roles: PUBLIC_ACCESS }
        - { path: ^/search, roles: PUBLIC_ACCESS }
        - { path: ^/api/publications$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/publications, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/commentaires, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/reposts, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/follows, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # Le reste reste public

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
